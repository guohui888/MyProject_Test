/**   
 * @Title: SureOrderActivity.java 
 * @Package cn.com.zhoufu.mouth.activity.cart 
 * @Description: TODO(用一句话描述该文件做什么) 
 * @author 王小杰   
 * @date 2014-2-18 下午3:50:01
 * @version V1.0   
 */

package cn.com.zhoufu.mouth.activity.cart;

import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RadioGroup;
import android.widget.TextView;
import android.widget.Toast;
import cn.com.zhoufu.mouth.R;
import cn.com.zhoufu.mouth.activity.BaseActivity;
import cn.com.zhoufu.mouth.activity.MainActivity;
import cn.com.zhoufu.mouth.activity.cart.pay.Keys;
import cn.com.zhoufu.mouth.activity.cart.pay.Result;
import cn.com.zhoufu.mouth.activity.cart.pay.Rsa;
import cn.com.zhoufu.mouth.activity.mine.AddAddressActivity;
import cn.com.zhoufu.mouth.activity.mine.AddressActivity;
import cn.com.zhoufu.mouth.activity.mine.OrderActivity;
import cn.com.zhoufu.mouth.adapter.SureAdapter;
import cn.com.zhoufu.mouth.constants.Constant;
import cn.com.zhoufu.mouth.model.AddCartInfo;
import cn.com.zhoufu.mouth.model.AddOrderInfo;
import cn.com.zhoufu.mouth.model.AddreInfo;
import cn.com.zhoufu.mouth.model.AddressInfo;
import cn.com.zhoufu.mouth.model.Bean;
import cn.com.zhoufu.mouth.model.GoodsListInfo;
import cn.com.zhoufu.mouth.utils.WebServiceUtils;
import cn.com.zhoufu.mouth.utils.WebServiceUtils.WebServiceCallBack;
import cn.com.zhoufu.mouth.view.MyListView;

import com.alibaba.fastjson.JSON;
import com.alipay.android.app.sdk.AliPay;
import com.lidroid.xutils.view.annotation.ViewInject;
import com.lidroid.xutils.view.annotation.event.OnCheckedChange;
import com.lidroid.xutils.view.annotation.event.OnClick;

public class SureOrderActivity extends BaseActivity {

	@ViewInject(R.id.tvTotalPrice)
	private TextView tvTotalPrice;

	@ViewInject(R.id.sureListView)
	private MyListView mListView;

	@ViewInject(R.id.ly_address)
	private LinearLayout ly_address;

	@ViewInject(R.id.radioGroup)
	private RadioGroup radioGroup;

	@ViewInject(R.id.radioGroup2)
	private RadioGroup radioGroup2;

	@ViewInject(R.id.tvAddress)
	private TextView tvAddress;

	@ViewInject(R.id.tvAddressName)
	private TextView tvAddressName;

	@ViewInject(R.id.tvAddressTel)
	private TextView tvAddressTel;

	@ViewInject(R.id.edTime)
	private EditText edTime;

	@ViewInject(R.id.submitOrderBtn)
	private Button submitOrderBtn;

	private double totalPrice;

	private List<AddCartInfo> list;

	private SureAdapter mAdapter;

	private AddressInfo info;

	private AddreInfo info1;

	private int pay_id = 1, shipping_id = 6;

	private String pay_name = "货到付款", shipping_name = "大嘴巴速递";

	private String best_time = "尽快发货";

	private static final int RQF_PAY = 1;

	private static final int RQF_LOGIN = 2;

	String orderNo;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setLayout(this, R.layout.activity_sure_order);
		setTitle("确认订单");
		initView();
		info = new AddressInfo();
		info1 = new AddreInfo();

	}

	public void initView() {
		totalPrice = Double.parseDouble(getIntent()
				.getStringExtra("totalPrice"));
		if (application.getUser().getUser_id() == 0) {
			submitOrderBtn.setText("立即支付");
		}
		list = (List<AddCartInfo>) getIntent().getSerializableExtra("list");
		tvTotalPrice.setText("￥" + totalPrice);
		mAdapter = new SureAdapter(mContext);
		mAdapter.setList(list);
		mListView.setAdapter(mAdapter);
		
		
		tvAddress.setText("您还没有选择收货地址");
		
		
		
	}

	@OnClick(R.id.ly_address)
	public void clickAddress(View v) {
		Intent intent = new Intent(mContext, AddressActivity.class);
		intent.putExtra("tag", "1");
		startActivityForResult(intent, 10);
	}

	@OnCheckedChange(R.id.radioGroup)
	public void onCheckedChanged(RadioGroup group, int checkedId) {
		switch (checkedId) {
		case R.id.radioButton1:
			pay_id = 1;
			pay_name = "货到付款";
			break;
		case R.id.radioButton2:
			pay_id = 3;
			pay_name = "支付宝";
			break;
		}
	}

	@OnCheckedChange(R.id.radioGroup2)
	public void onCheckedChanged2(RadioGroup group, int checkedId) {
		switch (checkedId) {
		case R.id.radioButton3:
			edTime.setVisibility(View.GONE);
			best_time = "尽快发货";
			break;
		case R.id.radioButton4:
			best_time = edTime.getText().toString().trim();
			edTime.setVisibility(View.VISIBLE);
			break;
		}
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		if (requestCode == 10) {
			if (resultCode == RESULT_OK) {
				Bundle extras = data.getExtras();
				if (extras != null) {
					if (application.getUser().getUser_id() != 0) {
						info = (AddressInfo) extras.getSerializable("info");
						tvAddress.setText("河南省郑州市" + info.getCityName()
								+ info.getAddress());
						tvAddressName.setText(info.getConsignee());
						tvAddressTel.setText(info.getTel());
					} else {
						info1 = (AddreInfo) extras.getSerializable("info1");
						tvAddress.setText("河南省郑州市" + info1.getCityName()
								+ info1.getAddress());
						tvAddressName.setText(info1.getConsignee());
						tvAddressTel.setText(info1.getTel());
					}

				}
			}
		}
	}

	public void submit() {
		if (application.getUser().getUser_id() != 0) {
			if ("".equals(info.getConsignee()) || info.getConsignee() == null) {
				application.showToast("请选择收货地址");
				return;
			}
		} else {
			if ("".equals(info1.getConsignee()) || info1.getConsignee() == null) {
				application.showToast("请选择收货地址");
				return;
			}
		}
		if (edTime.getVisibility() == View.VISIBLE
				&& ("".equals(edTime.getText().toString().trim()) || edTime
						.getText().toString().trim() == null)) {
			application.showToast("请输入最佳送货时间");
			return;
		}

		AddOrderInfo addOrderInfo = new AddOrderInfo();
		if (application.getUser().getUser_id() != 0) {
			addOrderInfo.setUser_id(application.getUser().getUser_id() + "");
			addOrderInfo.setConsignee(info.getConsignee());
			addOrderInfo.setCountry("1");
			addOrderInfo.setProvince("11");
			addOrderInfo.setCity(info.getCity());
			addOrderInfo.setDistrict(info.getDistrict());
			addOrderInfo.setAddress(info.getAddress());
			addOrderInfo.setZipcode(info.getZipcode());
			addOrderInfo.setTel(info.getTel());
			addOrderInfo.setMobile(info.getMobile());
			addOrderInfo.setEmail(info.getEmail());
			addOrderInfo.setBest_time(best_time);
			addOrderInfo.setSign_building(info.getSign_building());
			addOrderInfo.setPostscript("");
			addOrderInfo.setShipping_id(shipping_id + "");
			addOrderInfo.setShipping_name(shipping_name);
			addOrderInfo.setPay_id(pay_id + "");
			addOrderInfo.setPay_name(pay_name);
			addOrderInfo.setHow_oos("等待所有商品备齐后再发");
			addOrderInfo.setGoods_amount(totalPrice + "");
			addOrderInfo.setShipping_fee("0");
			addOrderInfo.setOrder_amount(totalPrice + "");
		} else {
			addOrderInfo.setUser_id("0");
			addOrderInfo.setConsignee(info1.getConsignee());
			addOrderInfo.setCountry("1");
			addOrderInfo.setProvince("11");
			addOrderInfo.setCity(AddAddressActivity.cityid);
			addOrderInfo.setDistrict(AddAddressActivity.placeid);
			addOrderInfo.setAddress(info1.getAddress());
			addOrderInfo.setZipcode(info1.getZipcode());
			addOrderInfo.setTel(info1.getTel());
			addOrderInfo.setMobile(info1.getMobile());
			addOrderInfo.setEmail(info1.getEmail());
			addOrderInfo.setBest_time(best_time);
			addOrderInfo.setSign_building(info1.getSign_building());
			addOrderInfo.setPostscript("");
			addOrderInfo.setShipping_id(shipping_id + "");
			addOrderInfo.setShipping_name(shipping_name);
			addOrderInfo.setPay_id(pay_id + "");
			addOrderInfo.setPay_name(pay_name);
			addOrderInfo.setHow_oos("等待所有商品备齐后再发");
			addOrderInfo.setGoods_amount(totalPrice + "");
			addOrderInfo.setShipping_fee("0");
			addOrderInfo.setOrder_amount(totalPrice + "");
		}

		List<GoodsListInfo> goodsList = new ArrayList<GoodsListInfo>();
		for (int i = 0; i < list.size(); i++) {
			GoodsListInfo info = new GoodsListInfo();
			info.setGoods_id(list.get(i).getGoods_id() + "");
			info.setGoods_name(list.get(i).getGoods_name() + "");
			info.setGoods_sn(list.get(i).getGoods_sn());
			info.setGoods_number(list.get(i).getGoods_number() + "");
			info.setMarket_price(list.get(i).getMarket_price());
			info.setGoods_price(list.get(i).getGoods_price());
			info.setGoods_attr("");
			goodsList.add(info);
		}

		addOrderInfo.setGoodsList(goodsList);
		Log.i("info", addOrderInfo.toString());
		HashMap<String, Object> map = new HashMap<String, Object>();
		map.put("StrJosn", addOrderInfo.toString());
		showProgress("正在提交订单");
		WebServiceUtils.callWebService(Constant.S_AddOrder, map,
				new WebServiceCallBack() {
					public void callBack(Object result) {
						dismissProgress();
						if (result != null) {
							Bean bean = JSON.parseObject(result.toString(),
									Bean.class);
							if (bean.getState() == 1) {
								if (ProductDetailActivity.islogin) {
									application.showToast("添加订单成功");
									if (pay_id == 1) {// 货到付款
										startActivity(new Intent(mContext,
												MainActivity.class));
										finish();
									} else if (pay_id == 3) {// 支付宝
										orderNo = JSON.parseObject(
												bean.getData()).getString(
												"order_sn");
										pay_test(orderNo);
									}
								} else {
									if (pay_id == 1) {// 货到付款
										application.showToast("您的订单已提交,请注意查收");
										finish();
									} else if (pay_id == 3) {// 支付宝
										orderNo = JSON.parseObject(
												bean.getData()).getString(
												"order_sn");
										pay_test(orderNo);
									}
								}
							} else {
								application.showToast("添加订单失败");
							}
						}
					}
				});
	}

	@OnClick(R.id.submitOrderBtn)
	public void submitOrder(View v) {
		submit();
	}

	private void pay_test(String orderNo) {
		try {
			Log.i("ExternalPartner", "onItemClick");
			String info = getNewOrderInfo(orderNo);
			String sign = Rsa.sign(info, Keys.PRIVATE);
			sign = URLEncoder.encode(sign);
			info += "&sign=\"" + sign + "\"&" + getSignType();
			Log.i("ExternalPartner", "start pay");
			// start the pay.

			final String orderInfo = info;
			new Thread() {
				public void run() {
					AliPay alipay = new AliPay(SureOrderActivity.this, mHandler);

					// 设置为沙箱模式，不设置默认为线上环境
					// alipay.setSandBox(true);
					String result = alipay.pay(orderInfo);
					Message msg = new Message();
					msg.what = RQF_PAY;
					msg.obj = result;
					mHandler.sendMessage(msg);
				}
			}.start();

		} catch (Exception ex) {
			ex.printStackTrace();
			application.showToast("Failure calling remote service");
		}
	}

	private String getNewOrderInfo(String orderNo) {
		StringBuilder sb = new StringBuilder();
		sb.append("partner=\"");
		sb.append(Keys.DEFAULT_PARTNER);
		sb.append("\"&out_trade_no=\"");
		sb.append(orderNo);
		sb.append("\"&subject=\"");
		sb.append(list.get(0).getGoods_name());
		sb.append("\"&body=\"");
		sb.append(list.get(0).getGoods_name());
		sb.append("\"&total_fee=\"");
		sb.append(totalPrice);//
		sb.append("\"&notify_url=\"");

		// 网址需要做URL编码
		sb.append(URLEncoder.encode("http://notify.java.jpxx.org/index.jsp"));
		sb.append("\"&service=\"mobile.securitypay.pay");
		sb.append("\"&_input_charset=\"UTF-8");
		sb.append("\"&return_url=\"");
		sb.append(URLEncoder.encode("http://m.alipay.com"));
		sb.append("\"&payment_type=\"1");
		sb.append("\"&seller_id=\"");
		sb.append(Keys.DEFAULT_SELLER);

		// 如果show_url值为空，可不传
		// sb.append("\"&show_url=\"");
		sb.append("\"&it_b_pay=\"1m");
		sb.append("\"");

		return new String(sb);
	}

	private String getSignType() {
		return "sign_type=\"RSA\"";
	}

	Handler mHandler = new Handler() {
		public void handleMessage(android.os.Message msg) {
			Result result = new Result((String) msg.obj);
			switch (msg.what) {
			case RQF_PAY:
				if ("9000".equals(result.getResultStatus())) {
					updateStatue(orderNo);
				} else {
					application.showToast("支付失败");
				}
				break;
			case RQF_LOGIN: {
				Toast.makeText(SureOrderActivity.this, result.getResult(),
						Toast.LENGTH_SHORT).show();
			}
				break;
			default:
				break;
			}
		};
	};

	public void updateStatue(String orderNo) {
		HashMap<String, Object> map = new HashMap<String, Object>();
		map.put("Order_Status", 5);
		map.put("Order_Sn", orderNo);
		WebServiceUtils.callWebService(Constant.S_UpdateOrdersState, map,
				new WebServiceCallBack() {
					public void callBack(Object result) {
						Log.i("info", result.toString());
						Bean bean = JSON.parseObject(result.toString(),
								Bean.class);
						if (bean.getState() == 1) {
							startActivity(new Intent(mContext,
									MainActivity.class));
							finish();
						}
					}
				});
	}
}
