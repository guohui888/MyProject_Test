/**   
 * @Title: HomeFragment.java 
 * @Package cn.com.zhoufu.mouth.activity.home 
 * @Description: TODO(首页fragment) 
 * @author 王小杰
 * @date 2014-2-10 下午13:09:00 
 * @version V1.0   
 */

package cn.com.zhoufu.mouth.activity.home;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;
import org.json.JSONObject;

import android.app.Activity;
import android.app.Dialog;
import android.app.PendingIntent;
import android.app.PendingIntent.CanceledException;
import android.content.DialogInterface;
import android.content.DialogInterface.OnDismissListener;
import android.content.Intent;
import android.location.LocationManager;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.provider.Settings;
import android.support.v4.view.ViewPager;
import android.support.v4.view.ViewPager.OnPageChangeListener;
import android.util.Log;
import android.view.Display;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.FrameLayout.LayoutParams;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import cn.com.zhoufu.mouth.R;
import cn.com.zhoufu.mouth.activity.BaseFragment;
import cn.com.zhoufu.mouth.adapter.HomeCenterAdapter;
import cn.com.zhoufu.mouth.adapter.HomeTopAdapter;
import cn.com.zhoufu.mouth.constants.Constant;
import cn.com.zhoufu.mouth.model.AddInfo;
import cn.com.zhoufu.mouth.model.AddInfos;
import cn.com.zhoufu.mouth.model.AddresInfo;
import cn.com.zhoufu.mouth.model.Bean;
import cn.com.zhoufu.mouth.model.HomeCenterInfo;
import cn.com.zhoufu.mouth.utils.ListViewUtils;
import cn.com.zhoufu.mouth.utils.WebServiceUtils;
import cn.com.zhoufu.mouth.utils.WebServiceUtils.WebServiceCallBack;
import cn.com.zhoufu.mouth.utils.XMLParser;
import cn.com.zhoufu.mouth.view.MyListView;

import com.alibaba.fastjson.JSON;
import com.baidu.location.BDLocation;
import com.baidu.location.BDLocationListener;
import com.baidu.location.LocationClient;
import com.baidu.location.LocationClientOption;
import com.lidroid.xutils.ViewUtils;
import com.lidroid.xutils.view.annotation.ViewInject;
import com.lidroid.xutils.view.annotation.event.OnClick;
import com.lidroid.xutils.view.annotation.event.OnItemClick;

public class HomeFragment extends BaseFragment implements OnPageChangeListener,
		OnClickListener {

	@ViewInject(R.id.btn_scan)
	private Button btnScan;

	@ViewInject(R.id.tvAddress)
	public static TextView tvAddress;

	@ViewInject(R.id.ly_search)
	private LinearLayout ly_search;

	@ViewInject(R.id.adv_pager)
	private ViewPager mViewPager;

	@ViewInject(R.id.homeListView)
	private MyListView mListView;

	@ViewInject(R.id.viewGroup)
	private LinearLayout viewGroup;

	private ImageView[] imageViews = null;

	private ImageView imageView = null;

	private ScheduledExecutorService scheduledExecutorService;

	private int currentItem = 0; // 当前图片的索引号

	private List<HomeCenterInfo> list;

	private HomeCenterAdapter mAdapter;

	private LocationClientOption option;

	private LocationClient mLocationClient = null;

	double latitude = 0.0; // 纬度
	double longitude = 0.0; // 经度

	private final int LOADSUCCESS = 11;
	private final int LOADFAIL = 22;

	private HttpResponse httpResponse = null;

	InputStream inputStream = null;// 输入流对象

	String city, district;

	String disString;

	String serverCode;

	String androidUrl;

	private Dialog dialog;

	public static Boolean gpsEnabled;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		gpsEnabled = Settings.Secure.isLocationProviderEnabled(
				mContext.getContentResolver(), LocationManager.GPS_PROVIDER);
		location();
		if (gpsEnabled == false) {
			openGPSSettings();

		}
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View view = inflater.inflate(R.layout.fragment_home, container, false);
		ViewUtils.inject(this, view);
		return view;
	}

	@Override
	public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);
		list = new ArrayList<HomeCenterInfo>();
		mAdapter = new HomeCenterAdapter(mContext);
		mAdapter.setList(list);
		ListViewUtils.setListViewHeightBasedOnChildren(mListView);
		mListView.setAdapter(mAdapter);
		if (!XMLParser.isNetworkAvailable(mContext)) {
			application.showToast("网络未连接");
			return;
		}
		homeTop();
		homeCenter();

		new Thread(new updateTask()).start();
	}

	private class updateTask implements Runnable {

		public void run() {
			try {
				update();
			} catch (Exception e) {
			}
		}

	}
	
//	05-05 18:24:00.415: E/xml(21542): ﻿<update>
//	05-05 18:24:00.415: E/xml(21542): <androidversion>28</androidversion>
//	05-05 18:24:00.415: E/xml(21542): <androidcontent>1、bug修复。</androidcontent>
//	05-05 18:24:00.415: E/xml(21542): <bugrank>1</bugrank>
//	05-05 18:24:00.415: E/xml(21542): <ioscontent>1、软件更新内容。</ioscontent>
//	05-05 18:24:00.415: E/xml(21542): <androidurl>http://app.52dzb.com/apk/dazuiba.apk</androidurl>
//	05-05 18:24:00.415: E/xml(21542): </update>

//	05-05 18:41:44.380: E/xml(29415):    <update>
//	05-05 18:41:44.380: E/xml(29415): <androidversion>28</androidversion>
//	05-05 18:41:44.380: E/xml(29415): <androidcontent>1、bug修复。</androidcontent>
//	05-05 18:41:44.380: E/xml(29415): <bugrank>1</bugrank>
//	05-05 18:41:44.380: E/xml(29415): <ioscontent>1、软件更新内容。</ioscontent>
//	05-05 18:41:44.380: E/xml(29415): <androidurl>http://app.52dzb.com/apk/dazuiba.apk</androidurl>
//	05-05 18:41:44.380: E/xml(29415): </update>

	// 更新
	public void update() {
		String bugrank;
		XMLParser parser = new XMLParser();
		String xml = parser.getXmlFromUrl(Constant.UPDATE_VERSION_URL);
		Log.e("xml", xml);
		HashMap<String, String> map = (HashMap<String, String>) parser
				.ParseUpdateInfo(xml);
		serverCode = map.get("androidversion");
		androidUrl = map.get("androidurl");
		bugrank = map.get("bugrank");
		int versionCode = 0;
		try {
			versionCode = XMLParser.getVersionCode(mContext);
			Log.e("", "tag-----------------" + versionCode + "   " + serverCode);
			if (Integer.parseInt(serverCode) > versionCode) {
				Message msg = new Message();
				msg.what = 1;
				msg.obj = bugrank;
				mHandler.sendMessage(msg);
				Log.e("", "tag==============");
			} else {
				Message msg = new Message();
				msg.what = 2;
				mHandler.sendMessage(msg);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private Handler mHandler = new Handler() {
		public void handleMessage(android.os.Message msg) {
			switch (msg.what) {
			case 1:
				if (myProgressDialog != null) {
					dismissProgress();
				}
				updateDialog(msg.obj.toString());
				break;
			case 2:
				if (myProgressDialog != null) {
					dismissProgress();
				}
				break;
			}
		};
	};

	public void updateDialog(String bugrank) {
		if (dialog == null) {
			dialog = new Dialog(mContext, R.style.dialog);
			dialog.setCancelable(true);
			dialog.setCanceledOnTouchOutside(true);
			dialog.setContentView(R.layout.dialog_update);

			Button btnTakePhoto = (Button) dialog.findViewById(R.id.update_btn);
			Button btnPickPhoto = (Button) dialog
					.findViewById(R.id.no_update_btn);
			Button btnCancel = (Button) dialog.findViewById(R.id.btn_cancel);
			if (bugrank.equals("1")) {
				btnCancel.setVisibility(View.GONE);
				btnPickPhoto.setVisibility(View.GONE);
				dialog.setOnDismissListener(new OnDismissListener() {
					@Override
					public void onDismiss(DialogInterface dialog) {
						if (HomeFragment.gpsEnabled) {
							openGPSSettings();
						}
						mAct.finish();
						System.exit(0);// 退出程序
					}
				});
			}
			btnTakePhoto.setOnClickListener(this);
			btnPickPhoto.setOnClickListener(this);
			btnCancel.setOnClickListener(this);

			WindowManager m = ((Activity) mContext).getWindowManager();
			Display d = m.getDefaultDisplay();
			WindowManager.LayoutParams params = dialog.getWindow()
					.getAttributes();
			params.width = (int) (d.getWidth() * 0.99);
			params.height = (int) (d.getHeight() * 0.5);
			Window window = dialog.getWindow();
			window.setGravity(Gravity.BOTTOM);
		}
		dialog.show();
	}

	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.btn_cancel:
			dialog.dismiss();
			break;
		case R.id.no_update_btn:
			dialog.dismiss();
			break;
		case R.id.update_btn:
			Constant.SERVER_CONFIG_LOADPATH = androidUrl;
			startActivity(new Intent(Intent.ACTION_VIEW,
					Uri.parse(Constant.SERVER_CONFIG_LOADPATH)));
			dialog.dismiss();
			break;
		}
	}

	@OnClick(R.id.tvAddress)
	public void addressClick(View v) {
		mLocationClient.stop();
		Intent intent = new Intent();
		intent.putExtra("city", city);
		if (MapsActivity.name == null) {
			intent.putExtra("district", disString);
		} else {
			intent.putExtra("district", MapsActivity.name);
		}
		intent.setClass(mContext, MapsActivity.class);
		startActivity(intent);
	}

	@OnClick(R.id.btn_scan)
	public void scanClick(View v) {
		mLocationClient.stop();
		startActivity(new Intent(mContext, MipcaActivityCapture.class));

	}

	@OnClick(R.id.ly_search)
	public void searchClick(View v) {
		mLocationClient.stop();
		startActivity(new Intent(mContext, SearchActivity.class));
	}

	public void homeTop() {
		HashMap<String, Object> map = new HashMap<String, Object>();
		map.put("isapp_position", 2);
		WebServiceUtils.callWebService(Constant.S_Ad, map,
				new WebServiceCallBack() {

					public void callBack(Object result) {
						Log.e("info111", result.toString());
						if (result != null) {
							Bean bean = JSON.parseObject(result.toString(),
									Bean.class);
							List<HomeCenterInfo> list = JSON.parseArray(
									bean.getData(), HomeCenterInfo.class);
							initViewPager(list);
						}
					}
				});
	}

	public void homeCenter() {
		HashMap<String, Object> map = new HashMap<String, Object>();
		map.put("isapp_position", 1);
		showProgress("正在加载中");
		WebServiceUtils.callWebService(Constant.S_Ad, map,
				new WebServiceCallBack() {

					public void callBack(Object result) {
						dismissProgress();
						Log.e("info222", result.toString());
						if (result != null) {
							Bean bean = JSON.parseObject(result.toString(),
									Bean.class);
							List<HomeCenterInfo> list = JSON.parseArray(
									bean.getData(), HomeCenterInfo.class);
							mAdapter.addAll(list);
						}
					}
				});
	}

	private void initViewPager(List<HomeCenterInfo> topList) {
		if (imageViews != null) {
			viewGroup.removeAllViews();
		}
		imageViews = new ImageView[topList.size()];
		for (int i = 0; i < topList.size(); i++) {
			imageView = new ImageView(getActivity());
			imageView.setLayoutParams(new LayoutParams(
					LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
			LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(
					LinearLayout.LayoutParams.WRAP_CONTENT,
					LinearLayout.LayoutParams.WRAP_CONTENT);
			lp.setMargins(10, 5, 0, 5);
			imageView.setLayoutParams(lp);
			imageViews[i] = imageView;
			if (i == 0) {
				imageViews[i].setBackgroundResource(R.drawable.dot_focus);
			} else {
				imageViews[i].setBackgroundResource(R.drawable.dot_normal);
			}
			viewGroup.addView(imageViews[i]);
		}
		mViewPager.setAdapter(new HomeTopAdapter(mContext, topList));
		mViewPager.setOnPageChangeListener(this);
	}

	public void onPageScrollStateChanged(int arg0) {

	}

	public void onPageScrolled(int arg0, float arg1, int arg2) {

	}

	public void onPageSelected(int arg0) {
		for (int i = 0; i < imageViews.length; i++) {
			imageViews[arg0].setBackgroundResource(R.drawable.dot_focus);
			if (arg0 != i) {
				imageViews[i].setBackgroundResource(R.drawable.dot_normal);
			}
		}
	}

	// 切换当前显示的图片
	private Handler handler = new Handler() {
		public void handleMessage(android.os.Message msg) {
			mViewPager.setCurrentItem(currentItem);// 切换当前显示的图片
		};
	};

	@Override
	public void onStart() {
		super.onStart();
		scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();
		// 当Activity显示出来后，每两秒钟切换一次图片显示
		scheduledExecutorService.scheduleAtFixedRate(new ScrollTask(), 1, 5,
				TimeUnit.SECONDS);
	};

	@Override
	public void onStop() {
		// 当Activity不可见的时候停止切换
		scheduledExecutorService.shutdown();
		super.onStop();
	}

	private class ScrollTask implements Runnable {

		public void run() {
			synchronized (mViewPager) {
				currentItem = (currentItem + 1) % imageViews.length;
				handler.obtainMessage().sendToTarget(); // 通过Handler切换图片
			}
		}
	}

	@OnItemClick(R.id.homeListView)
	public void onItemClick(AdapterView<?> arg0, View arg1, int arg2, long arg3) {
		mLocationClient.stop();
		if (!XMLParser.isNetworkAvailable(mContext)) {
			application.showToast("网络未连接");
			return;
		}
		Intent intent = new Intent(mContext, PromotionActivity.class);
		intent.putExtra("promotion", list.get(arg2));
		startActivity(intent);
	}

	/**
	 * 直接打开/关闭GPS
	 */
	private void openGPSSettings() {
		Intent gpsIntent = new Intent();
		gpsIntent.setClassName("com.android.settings",
				"com.android.settings.widget.SettingsAppWidgetProvider");
		gpsIntent.addCategory("android.intent.category.ALTERNATIVE");
		gpsIntent.setData(Uri.parse("custom:3"));
		try {
			PendingIntent.getBroadcast(mContext, 0, gpsIntent, 0).send();
			Thread locThread = new Thread(new LocationWork());
			locThread.start();
		} catch (CanceledException e) {
			e.printStackTrace();
		}

	}

	// 显示地址
	Handler locHandler = new Handler() {
		@Override
		public void handleMessage(Message msg) {
			super.handleMessage(msg);
			if (msg.what == LOADSUCCESS) {
				Bundle bundle = msg.getData();
				latitude = bundle.getDouble("lati");
				longitude = bundle.getDouble("loni");
				getAddr(latitude, longitude);
			} else {

			}
		}
	};

	private BDLocationListener locationListener = new BDLocationListener() {
		@Override
		public void onReceiveLocation(BDLocation location) {

			Message msg = new Message();

			if (location != null) {
				double lati = location.getLatitude();
				double loni = location.getLongitude();
				Bundle bundle = new Bundle();
				bundle.putDouble("lati", lati);
				bundle.putDouble("loni", loni);
				msg.setData(bundle);
				if (latitude == 0.0 && longitude == 0.0) {
					msg.what = LOADSUCCESS;
					locHandler.sendMessage(msg);
				}
			} else {
				msg.what = LOADFAIL;
				locHandler.sendMessage(msg);
			}
		}

		public void onReceivePoi(BDLocation location) {

		}
	};

	public void getAddr(double lati, double loni) {
		String Url = "http://api.map.baidu.com/geocoder?output=json&location="
				+ lati + ",%20" + loni
				+ "&key=37492c0ee6f924cb5e934fa08c6b1676";

		// 生成一个请求对象
		HttpGet httpGet = new HttpGet(Url);

		// 生成一个http客户端对象
		HttpClient httpClient = new DefaultHttpClient();
		// 发送请求
		try {
			httpResponse = httpClient.execute(httpGet);// 接收响应

			if (httpResponse.getStatusLine().getStatusCode() == 200) {
				String conteneString = EntityUtils.toString(httpResponse
						.getEntity());

				JSONObject j = new JSONObject(conteneString);
				AddresInfo info = new AddresInfo();
				info.setStatus(j.getString("status"));
				info.setResult(j.getString("result"));

				String result = info.getResult();

				JSONObject jsonObject = new JSONObject(result);
				AddInfo addInfo = new AddInfo();
				addInfo.setBusiness(jsonObject.getString("business"));
				addInfo.setFormatted_address(jsonObject
						.getString("formatted_address"));
				addInfo.setAddressComponent(jsonObject
						.getString("addressComponent"));
				addInfo.setCityCode(jsonObject.getInt("cityCode"));
				String reString = addInfo.getAddressComponent();
				JSONObject jsonObject2 = new JSONObject(reString);
				AddInfos addInfos = new AddInfos();
				addInfos.setCity(jsonObject2.getString("city"));
				addInfos.setDistrict(jsonObject2.getString("district"));
				addInfos.setProvince(jsonObject2.getString("province"));
				addInfos.setStreet(jsonObject2.getString("street"));
				addInfos.setStreet_number(jsonObject2
						.getString("street_number"));
				city = addInfos.getCity();
				district = addInfos.getDistrict();
				Log.e("", "-------------" + result);
				if (!"郑州市".contains(city)) {
					tvAddress.setText("惠济区");
					disString = "惠济区";
				} else {
					tvAddress.setText(district.substring(0, 3));
					disString = district;
				}
				if (city == null || city.equals("") || city.equals("null")) {

				} else {
					if (gpsEnabled) {
						openGPSSettings();
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {// 最后一定要关闭输入流

		}
	}

	// 定位线程
	private class LocationWork implements Runnable {
		@Override
		public void run() {
			// 定位
			option.setOpenGps(true);// 打开GPS
			option.setCoorType("bd09ll"); // 设置坐标类型为bd09ll
			option.setAddrType("all");
			option.setPriority(LocationClientOption.NetWorkFirst); // 设置网络优先
			option.setProdName("hollyphone-fj10010"); // 设置产品线名称
			option.setScanSpan(10000); // 定时定位，每隔5秒钟定位一次。
			mLocationClient.setLocOption(option);
			mLocationClient.registerLocationListener(locationListener);
			if (latitude == 0.0 && longitude == 0.0) {
				mLocationClient.start();
				Log.e("", "=====================");
			}
		}

	}

	@Override
	public void onDestroy() {
		mLocationClient.stop();
		super.onDestroy();
	}

	public void location() {
		option = new LocationClientOption();
		mLocationClient = new LocationClient(mContext);
	}

}
